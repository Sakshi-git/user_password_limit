<?php

/**
 * @file
 * Hook implementations and old style API functions.
 */
use Drupal\Core\Database\Database;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_cron()
 */
function user_password_limit_cron() {
  $cron_last = \Drupal::state()->get('system.cron_last');
  if (date('ymd', $cron_last) != date('ymd', time())) {
    $connection = Database::getConnection();
    $connection->truncate('user_password_limit')->execute();
    \Drupal::logger('user_password_limit')->notice("User password limit cron runs");
  }
}

/**
 * Implements hook_form_FORM_ID_alter(). 
 */
function user_password_limit_form_user_pass_alter(&$form, &$form_state) {
  array_unshift($form['#validate'], 'check_reset_count');
  $form['actions']['submit']['#submit'][] = 'update_password_reset_count_forgotpassword';
}

/**
 * Validation to restrict user to generate limited amount of reset links.
 */
function check_reset_count(&$form, &$form_state) {
  if ($form_state->getValue('name')) {
    $name = $form_state->getValue('name');
    $user = user_load_by_mail($name);
    if (!$user){
      $user = user_load_by_name($name);
    }
    if ($user) {
      // Activate the user in drupal if blocked by multiple failed login attempts.
      $user->activate();
      $user->save();
      $database = Drupal::service('database');
      $query = $database->delete('flood')->condition('event', '%' . '.failed_login_ip', 'LIKE');
      $query->condition('identifier', $user->id() . '-%', 'LIKE');
      $success = $query->execute();
      // Activation end.
      $userId = $user->id();
      $connection = Database::getConnection();
      $max_limit = \Drupal::config('user_password_limit.settings')->get('max_limit');
      $userexist = $connection->select('user_password_limit', 'upl')
          ->fields('upl', array('uid', 'count'))
          ->condition('uid', $userId)
          ->execute()->fetchAll();
      if (count($userexist)) {
        $reset_count = $userexist[0]->count;
        if ($reset_count >= $max_limit) {
          $form_state->setErrorByName('name', t("You can't generate reset password link more than " . $max_limit . " times in a day. You have exceeded your reset limit today. Please try again later."));
          \Drupal::logger('user_password_limit')->notice($name . " tried to gemerate reset password link once the reset limit has been exceeded");
        }
      }
    }
  }
}

/**
 * Submit handler for user_pass form.
 */
function update_password_reset_count_forgotpassword(&$form, &$form_state) {
  $timestamp = \Drupal::time()->getRequestTime();
  $connection = Database::getConnection();
  $name = $form_state->getValue('name');
  $user = user_load_by_mail($name);
  if (!$user){
    $user = user_load_by_name($name);
  }
  $userId = $user->id();
  $userexist = $connection->select('user_password_limit', 'upl')
      ->fields('upl', array('uid', 'count'))
      ->condition('uid', $userId)
      ->execute()->fetchAll();
  if ($userexist) {
    $count = $userexist[0]->count;
    $count++;
    $connection->update('user_password_limit')
      ->condition('uid', $userId)
      ->fields(['count' => $count, 'timestamp' => $timestamp])
      ->execute();
  }
  else {
    $count = 1;
    $values = [
      $userId,
      $count,
      $timestamp,
    ];
    $connection->insert('user_password_limit')
      ->fields(['uid', 'count', 'timestamp'], $values)
      ->execute();
  }
  \Drupal::logger('user_password_limit')->notice($name . " generated the reset password link.");
}
